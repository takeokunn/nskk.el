;;; nskk-learning-persist.el --- Learning data persistence for NSKK -*- lexical-binding: t; -*-

;; Copyright (C) 2024 NSKK Development Team

;; Author: NSKK Development Team
;; Keywords: japanese, input method, skk, learning, persistence
;; Version: 0.1.0
;; Package-Requires: ((emacs "31.0"))

;; This file is part of NSKK.

;; NSKK is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; NSKK is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with NSKK.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; このファイルは学習データの永続化を実装します。
;;
;; 特徴:
;; - データシリアライズ（Emacs Lispの標準機能を使用）
;; - 増分保存（変更のあったデータのみ保存）
;; - 自動バックアップ
;; - データ圧縮（gzip使用）
;; - データ整合性チェック
;;
;; 保存対象:
;; - 頻度学習データ（nskk-learning-frequency）
;; - 文脈学習データ（nskk-learning-context）
;; - 履歴データ（nskk-history）
;;
;; ファイル形式:
;; - プレーンテキスト（S式形式）
;; - gzip圧縮版（オプション）
;;
;; 使用例:
;; (nskk-persist-save-all)
;; (nskk-persist-load-all)

;;; Code:

(require 'cl-lib)
(require 'nskk-learning-frequency)
(require 'nskk-learning-context)
(require 'nskk-history)

;;; カスタマイズ変数

(defgroup nskk-persist nil
  "Learning data persistence for NSKK."
  :group 'nskk
  :prefix "nskk-persist-")

(defcustom nskk-persist-directory
  (locate-user-emacs-file "nskk/")
  "学習データを保存するディレクトリ。"
  :type 'directory
  :group 'nskk-persist)

(defcustom nskk-persist-frequency-file "frequency.el"
  "頻度学習データのファイル名。"
  :type 'string
  :group 'nskk-persist)

(defcustom nskk-persist-context-file "context.el"
  "文脈学習データのファイル名。"
  :type 'string
  :group 'nskk-persist)

(defcustom nskk-persist-history-file "history.el"
  "履歴データのファイル名。"
  :type 'string
  :group 'nskk-persist)

(defcustom nskk-persist-auto-save t
  "非nilの場合、定期的に自動保存する。"
  :type 'boolean
  :group 'nskk-persist)

(defcustom nskk-persist-auto-save-interval 300
  "自動保存の間隔（秒）。
デフォルトは300秒（5分）。"
  :type 'integer
  :group 'nskk-persist)

(defcustom nskk-persist-compression t
  "非nilの場合、gzip圧縮を使用する。"
  :type 'boolean
  :group 'nskk-persist)

(defcustom nskk-persist-backup-count 3
  "保持するバックアップファイルの数。"
  :type 'integer
  :group 'nskk-persist)

(defcustom nskk-persist-incremental t
  "非nilの場合、増分保存を使用する。"
  :type 'boolean
  :group 'nskk-persist)

(defcustom nskk-persist-verify-integrity t
  "非nilの場合、読み込み時にデータ整合性をチェックする。"
  :type 'boolean
  :group 'nskk-persist)

;;; グローバル変数

(defvar nskk-persist-auto-save-timer nil
  "自動保存用タイマー。")

(defvar nskk-persist-last-save-time nil
  "最後に保存した時刻のplist。
形式: (:frequency TIME :context TIME :history TIME)")

(defvar nskk-persist-data-modified nil
  "データ変更フラグのplist。
形式: (:frequency BOOL :context BOOL :history BOOL)")

;;; ディレクトリ管理

(defun nskk-persist--ensure-directory ()
  "永続化ディレクトリが存在することを保証する。"
  (unless (file-directory-p nskk-persist-directory)
    (make-directory nskk-persist-directory t)))

(defun nskk-persist--get-file-path (filename)
  "FILENAME の完全パスを取得する。"
  (expand-file-name filename nskk-persist-directory))

(defun nskk-persist--get-backup-path (filepath)
  "FILEPATH のバックアップファイルパスを取得する。"
  (concat filepath ".bak"))

;;; シリアライズ

(defun nskk-persist--serialize-hash-table (table)
  "ハッシュテーブル TABLE をシリアライズ可能な形式に変換する。
戻り値: alist形式"
  (let ((result nil))
    (maphash (lambda (key value)
              (push (cons key value) result))
            table)
    result))

(defun nskk-persist--deserialize-hash-table (alist &optional test)
  "alist形式のデータをハッシュテーブルに変換する。"
  (let ((table (make-hash-table :test (or test 'equal))))
    (dolist (entry alist)
      (puthash (car entry) (cdr entry) table))
    table))

;;; 頻度データの保存/読み込み

;;;###autoload
(defun nskk-persist-save-frequency ()
  "頻度学習データを保存する。"
  (interactive)
  (nskk-persist--ensure-directory)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-frequency-file))
         (data (list :version 1
                    :timestamp (current-time)
                    :table (nskk-persist--serialize-hash-table
                           nskk-frequency-table)
                    :last-decay-time nskk-frequency-last-decay-time)))

    ;; バックアップ作成
    (when (file-exists-p filepath)
      (nskk-persist--create-backup filepath))

    ;; データ保存
    (with-temp-file filepath
      (insert ";; -*- mode: emacs-lisp; coding: utf-8-unix -*-\n")
      (insert ";; NSKK Frequency Learning Data\n")
      (insert ";; DO NOT EDIT THIS FILE MANUALLY\n\n")
      (prin1 data (current-buffer)))

    ;; 圧縮
    (when nskk-persist-compression
      (nskk-persist--compress-file filepath))

    ;; 保存時刻記録
    (setq nskk-persist-last-save-time
          (plist-put nskk-persist-last-save-time :frequency (current-time)))
    (setq nskk-persist-data-modified
          (plist-put nskk-persist-data-modified :frequency nil))

    (message "Frequency data saved to %s" filepath)))

;;;###autoload
(defun nskk-persist-load-frequency ()
  "頻度学習データを読み込む。"
  (interactive)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-frequency-file))
         (filepath-gz (concat filepath ".gz")))

    ;; 圧縮ファイルを優先
    (when (and nskk-persist-compression
               (file-exists-p filepath-gz))
      (nskk-persist--decompress-file filepath-gz))

    (if (file-exists-p filepath)
        (condition-case err
            (let* ((data (with-temp-buffer
                          (insert-file-contents filepath)
                          (goto-char (point-min))
                          (read (current-buffer))))
                   (version (plist-get data :version))
                   (table-data (plist-get data :table))
                   (last-decay (plist-get data :last-decay-time)))

              ;; バージョンチェック
              (unless (= version 1)
                (error "Unsupported data version: %s" version))

              ;; データ整合性チェック
              (when nskk-persist-verify-integrity
                (nskk-persist--verify-frequency-data table-data))

              ;; データ復元
              (setq nskk-frequency-table
                    (nskk-persist--deserialize-hash-table table-data))
              (setq nskk-frequency-last-decay-time
                    (or last-decay (current-time)))

              (message "Frequency data loaded from %s (%d entries)"
                      filepath (hash-table-count nskk-frequency-table)))

          (error
           (message "Failed to load frequency data: %s" (error-message-string err))
           nil))

      (message "Frequency data file not found: %s" filepath))))

;;; 文脈データの保存/読み込み

;;;###autoload
(defun nskk-persist-save-context ()
  "文脈学習データを保存する。"
  (interactive)
  (nskk-persist--ensure-directory)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-context-file))
         (data (list :version 1
                    :timestamp (current-time)
                    :bigram-table (nskk-persist--serialize-hash-table
                                  nskk-context-bigram-table)
                    :trigram-table (nskk-persist--serialize-hash-table
                                   nskk-context-trigram-table)
                    :unigram-table (nskk-persist--serialize-hash-table
                                   nskk-context-unigram-table)
                    :total-bigrams nskk-context-total-bigrams
                    :total-trigrams nskk-context-total-trigrams
                    :total-unigrams nskk-context-total-unigrams)))

    ;; バックアップ作成
    (when (file-exists-p filepath)
      (nskk-persist--create-backup filepath))

    ;; データ保存
    (with-temp-file filepath
      (insert ";; -*- mode: emacs-lisp; coding: utf-8-unix -*-\n")
      (insert ";; NSKK Context Learning Data\n")
      (insert ";; DO NOT EDIT THIS FILE MANUALLY\n\n")
      (prin1 data (current-buffer)))

    ;; 圧縮
    (when nskk-persist-compression
      (nskk-persist--compress-file filepath))

    ;; 保存時刻記録
    (setq nskk-persist-last-save-time
          (plist-put nskk-persist-last-save-time :context (current-time)))
    (setq nskk-persist-data-modified
          (plist-put nskk-persist-data-modified :context nil))

    (message "Context data saved to %s" filepath)))

;;;###autoload
(defun nskk-persist-load-context ()
  "文脈学習データを読み込む。"
  (interactive)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-context-file))
         (filepath-gz (concat filepath ".gz")))

    ;; 圧縮ファイルを優先
    (when (and nskk-persist-compression
               (file-exists-p filepath-gz))
      (nskk-persist--decompress-file filepath-gz))

    (if (file-exists-p filepath)
        (condition-case err
            (let* ((data (with-temp-buffer
                          (insert-file-contents filepath)
                          (goto-char (point-min))
                          (read (current-buffer))))
                   (version (plist-get data :version)))

              ;; バージョンチェック
              (unless (= version 1)
                (error "Unsupported data version: %s" version))

              ;; データ復元
              (setq nskk-context-bigram-table
                    (nskk-persist--deserialize-hash-table
                     (plist-get data :bigram-table)))
              (setq nskk-context-trigram-table
                    (nskk-persist--deserialize-hash-table
                     (plist-get data :trigram-table)))
              (setq nskk-context-unigram-table
                    (nskk-persist--deserialize-hash-table
                     (plist-get data :unigram-table)))
              (setq nskk-context-total-bigrams
                    (or (plist-get data :total-bigrams) 0))
              (setq nskk-context-total-trigrams
                    (or (plist-get data :total-trigrams) 0))
              (setq nskk-context-total-unigrams
                    (or (plist-get data :total-unigrams) 0))

              (message "Context data loaded from %s (bigrams: %d, trigrams: %d)"
                      filepath
                      (hash-table-count nskk-context-bigram-table)
                      (hash-table-count nskk-context-trigram-table)))

          (error
           (message "Failed to load context data: %s" (error-message-string err))
           nil))

      (message "Context data file not found: %s" filepath))))

;;; 履歴データの保存/読み込み

;;;###autoload
(defun nskk-persist-save-history ()
  "履歴データを保存する。"
  (interactive)
  (nskk-persist--ensure-directory)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-history-file))
         ;; 履歴を最大1000件に制限して保存
         (entries-to-save (seq-take nskk-history-entries 1000))
         (data (list :version 1
                    :timestamp (current-time)
                    :entries entries-to-save)))

    ;; バックアップ作成
    (when (file-exists-p filepath)
      (nskk-persist--create-backup filepath))

    ;; データ保存
    (with-temp-file filepath
      (insert ";; -*- mode: emacs-lisp; coding: utf-8-unix -*-\n")
      (insert ";; NSKK History Data\n")
      (insert ";; DO NOT EDIT THIS FILE MANUALLY\n\n")
      (prin1 data (current-buffer)))

    ;; 圧縮
    (when nskk-persist-compression
      (nskk-persist--compress-file filepath))

    ;; 保存時刻記録
    (setq nskk-persist-last-save-time
          (plist-put nskk-persist-last-save-time :history (current-time)))
    (setq nskk-persist-data-modified
          (plist-put nskk-persist-data-modified :history nil))

    (message "History data saved to %s (%d entries)"
            filepath (length entries-to-save))))

;;;###autoload
(defun nskk-persist-load-history ()
  "履歴データを読み込む。"
  (interactive)
  (let* ((filepath (nskk-persist--get-file-path nskk-persist-history-file))
         (filepath-gz (concat filepath ".gz")))

    ;; 圧縮ファイルを優先
    (when (and nskk-persist-compression
               (file-exists-p filepath-gz))
      (nskk-persist--decompress-file filepath-gz))

    (if (file-exists-p filepath)
        (condition-case err
            (let* ((data (with-temp-buffer
                          (insert-file-contents filepath)
                          (goto-char (point-min))
                          (read (current-buffer))))
                   (version (plist-get data :version))
                   (entries (plist-get data :entries)))

              ;; バージョンチェック
              (unless (= version 1)
                (error "Unsupported data version: %s" version))

              ;; データ復元
              (setq nskk-history-entries entries)

              (message "History data loaded from %s (%d entries)"
                      filepath (length entries)))

          (error
           (message "Failed to load history data: %s" (error-message-string err))
           nil))

      (message "History data file not found: %s" filepath))))

;;; 一括保存/読み込み

;;;###autoload
(defun nskk-persist-save-all ()
  "全ての学習データを保存する。"
  (interactive)
  (nskk-persist-save-frequency)
  (nskk-persist-save-context)
  (nskk-persist-save-history)
  (message "All learning data saved."))

;;;###autoload
(defun nskk-persist-load-all ()
  "全ての学習データを読み込む。"
  (interactive)
  (nskk-persist-load-frequency)
  (nskk-persist-load-context)
  (nskk-persist-load-history)
  (message "All learning data loaded."))

;;; 圧縮・解凍

(defun nskk-persist--compress-file (filepath)
  "FILEPATH を gzip 圧縮する。"
  (when (and (executable-find "gzip")
             (file-exists-p filepath))
    (call-process "gzip" nil nil nil "-f" filepath)))

(defun nskk-persist--decompress-file (filepath-gz)
  "FILEPATH-GZ を解凍する。"
  (when (and (executable-find "gzip")
             (file-exists-p filepath-gz))
    (call-process "gzip" nil nil nil "-d" "-f" filepath-gz)))

;;; バックアップ

(defun nskk-persist--create-backup (filepath)
  "FILEPATH のバックアップを作成する。"
  (when (file-exists-p filepath)
    ;; 既存バックアップをローテート
    (nskk-persist--rotate-backups filepath)

    ;; 新しいバックアップ作成
    (copy-file filepath
               (concat filepath ".bak.1")
               t)))

(defun nskk-persist--rotate-backups (filepath)
  "バックアップファイルをローテートする。"
  (dotimes (i (1- nskk-persist-backup-count))
    (let* ((old-num (- nskk-persist-backup-count i 1))
           (new-num (- nskk-persist-backup-count i))
           (old-file (format "%s.bak.%d" filepath old-num))
           (new-file (format "%s.bak.%d" filepath new-num)))
      (when (file-exists-p old-file)
        (rename-file old-file new-file t)))))

;;; データ整合性チェック

(defun nskk-persist--verify-frequency-data (table-data)
  "頻度データの整合性をチェックする。"
  (unless (listp table-data)
    (error "Invalid frequency data: not a list"))

  (dolist (entry table-data)
    (unless (consp entry)
      (error "Invalid frequency entry: not a cons"))
    (unless (consp (car entry))
      (error "Invalid frequency key: not a cons"))))

;;; 自動保存

;;;###autoload
(defun nskk-persist-enable-auto-save ()
  "自動保存を有効にする。"
  (interactive)
  (when nskk-persist-auto-save-timer
    (cancel-timer nskk-persist-auto-save-timer))

  (setq nskk-persist-auto-save-timer
        (run-with-timer nskk-persist-auto-save-interval
                       nskk-persist-auto-save-interval
                       #'nskk-persist--auto-save-callback))

  (message "NSKK auto-save enabled (interval: %d seconds)"
          nskk-persist-auto-save-interval))

;;;###autoload
(defun nskk-persist-disable-auto-save ()
  "自動保存を無効にする。"
  (interactive)
  (when nskk-persist-auto-save-timer
    (cancel-timer nskk-persist-auto-save-timer)
    (setq nskk-persist-auto-save-timer nil)
    (message "NSKK auto-save disabled")))

(defun nskk-persist--auto-save-callback ()
  "自動保存のコールバック関数。
変更があったデータのみ保存する。"
  (when nskk-persist-incremental
    (when (plist-get nskk-persist-data-modified :frequency)
      (nskk-persist-save-frequency))
    (when (plist-get nskk-persist-data-modified :context)
      (nskk-persist-save-context))
    (when (plist-get nskk-persist-data-modified :history)
      (nskk-persist-save-history)))

  (unless nskk-persist-incremental
    (nskk-persist-save-all)))

;;; 統計情報

;;;###autoload
(defun nskk-persist-statistics ()
  "永続化データの統計情報を返す。
戻り値: plist形式の統計情報"
  (nskk-persist--ensure-directory)

  (let ((freq-file (nskk-persist--get-file-path nskk-persist-frequency-file))
        (ctx-file (nskk-persist--get-file-path nskk-persist-context-file))
        (hist-file (nskk-persist--get-file-path nskk-persist-history-file)))

    (list :frequency-file freq-file
          :frequency-exists (file-exists-p freq-file)
          :frequency-size (when (file-exists-p freq-file)
                           (file-attribute-size (file-attributes freq-file)))
          :context-file ctx-file
          :context-exists (file-exists-p ctx-file)
          :context-size (when (file-exists-p ctx-file)
                         (file-attribute-size (file-attributes ctx-file)))
          :history-file hist-file
          :history-exists (file-exists-p hist-file)
          :history-size (when (file-exists-p hist-file)
                         (file-attribute-size (file-attributes hist-file)))
          :auto-save-enabled (and nskk-persist-auto-save-timer t)
          :compression-enabled nskk-persist-compression)))

;;;###autoload
(defun nskk-persist-print-statistics ()
  "永続化データの統計情報を表示する。"
  (interactive)
  (let ((stats (nskk-persist-statistics)))
    (message "NSKK Persistence Statistics:
  Frequency File: %s (%s, %s bytes)
  Context File: %s (%s, %s bytes)
  History File: %s (%s, %s bytes)
  Auto-save: %s
  Compression: %s"
             (plist-get stats :frequency-file)
             (if (plist-get stats :frequency-exists) "exists" "not found")
             (or (plist-get stats :frequency-size) "N/A")
             (plist-get stats :context-file)
             (if (plist-get stats :context-exists) "exists" "not found")
             (or (plist-get stats :context-size) "N/A")
             (plist-get stats :history-file)
             (if (plist-get stats :history-exists) "exists" "not found")
             (or (plist-get stats :history-size) "N/A")
             (if (plist-get stats :auto-save-enabled) "enabled" "disabled")
             (if (plist-get stats :compression-enabled) "enabled" "disabled"))))

;;; 初期化

(defun nskk-persist-init ()
  "永続化システムを初期化する。"
  (nskk-persist--ensure-directory)
  (setq nskk-persist-last-save-time nil)
  (setq nskk-persist-data-modified nil)

  ;; 自動保存有効化
  (when nskk-persist-auto-save
    (nskk-persist-enable-auto-save)))

(provide 'nskk-learning-persist)

;;; nskk-learning-persist.el ends here
